{"version":3,"sources":["serviceWorker.ts","Components/Grid.tsx","pages/Home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","fpsInterval","now","then","elapsed","ravel","y","x","width","Grid","props","state","grid","animationId","height","i","push","Date","this","update","step","coords","num","Math","floor","unravel","requestAnimationFrame","length","updateGrid","setState","squareSize","style","flexWrap","display","map","backgroundColor","colors","alignContent","justifyContent","color","id","React","0","1","2","Home","position","overflow","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97d4e6cf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\n\n// returns [y, x]\nconst unravel = (num: number, width: number) => [\n  Math.floor(num / width),\n  num % width,\n];\n\nconst ravel = (y: number, x: number, width: number) => y * width + x;\n\nlet fps = 4,\n  fpsInterval: number,\n  now: number,\n  then: number,\n  elapsed: number;\n\nexport interface GridProps extends React.HTMLAttributes<HTMLElement> {\n  width: number;\n  height: number;\n  squareSize: number;\n}\n\ninterface GridState {\n  grid: number[];\n  animationId: number;\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n  constructor(props: GridProps) {\n    super(props);\n    this.state = {\n      grid: [],\n      animationId: 0,\n    };\n    const { width, height } = this.props;\n\n    for (let i = 0; i < width * height; i++) {\n      if (i < width && i % 3 === 0) this.state.grid.push(2);\n      else this.state.grid.push(0);\n    }\n  }\n\n  componentDidMount() {\n    fpsInterval = 1000 / fps;\n    then = Date.now();\n    this.update();\n  }\n\n  updateGrid(step: number[], i: number) {\n    const { width, height } = this.props;\n    const coords = unravel(i, width);\n\n    switch (this.state.grid[i]) {\n      case 1:\n        if (\n          this.state.grid[ravel(coords[0] + 1, coords[1], width)] === 0 &&\n          coords[0] + 1 < width\n        ) {\n          step[ravel(coords[0] + 1, coords[1], width)] = step[i];\n          step[i] = 0;\n        } else if (\n          this.state.grid[ravel(coords[0] + 1, coords[1] + 1, width)] === 0 &&\n          coords[0] + 1 < height &&\n          coords[1] + 1 < width\n        ) {\n          step[ravel(coords[0] + 1, coords[1] + 1, width)] = step[i];\n          step[i] = 0;\n        } else if (\n          this.state.grid[ravel(coords[0] + 1, coords[1] - 1, width)] === 0 &&\n          coords[0] + 1 < height &&\n          coords[1] - 1 >= 0\n        ) {\n          step[ravel(coords[0] + 1, coords[1] - 1, width)] = step[i];\n          step[i] = 0;\n        }\n\n      case 2:\n        if (this.state.grid[ravel(coords[0] + 1, coords[1], width)] === 0) {\n          step[ravel(coords[0] + 1, coords[1], width)] = 1;\n        }\n    }\n  }\n\n  update() {\n    requestAnimationFrame(() => this.update());\n\n    now = Date.now();\n    elapsed = now - then;\n\n    if (elapsed > fpsInterval) {\n      then = now - (elapsed % fpsInterval);\n\n      const step = [...this.state.grid];\n\n      for (let i = 0; i < this.state.grid.length; i++) {\n        this.updateGrid(step, i);\n      }\n\n      this.setState({\n        grid: step,\n      });\n    }\n  }\n\n  render() {\n    const { width, height, squareSize } = this.props;\n\n    return (\n      <div\n        style={{\n          flexWrap: \"wrap\",\n          display: \"flex\",\n          width: width * squareSize,\n          height: height * squareSize,\n        }}\n      >\n        {this.state.grid.map((num: number) => (\n          <div\n            style={{\n              backgroundColor: `${colors[num]}`,\n              display: \"flex\",\n              alignContent: \"center\",\n              justifyContent: \"center\",\n              color: \"white\",\n              width: squareSize,\n              height: squareSize,\n            }}\n            id={`cell-${num}`}\n          ></div>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst colors: { [num: number]: string } = {\n  0: \"#000000\",\n  1: \"#d1a95b\",\n  2: \"#d1a95b\",\n};\n","import { Grid } from \"../Components\";\nimport * as React from \"react\";\n\nexport class Home extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          overflow: \"hidden\",\n          backgroundColor: \"#000000\",\n        }}\n      >\n        <Grid squareSize={10} width={100} height={16} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./index.css\";\nimport { Home } from \"./pages\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/portfolio/\" component={Home} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}