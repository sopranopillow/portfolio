{"version":3,"sources":["serviceWorker.ts","components/Flex/Flex.tsx","components/Flex/FlexItem.tsx","components/Computer/Screen.tsx","components/Computer/Icon.tsx","components/Computer/InnerScreen.tsx","components/Computer/TaskBar.tsx","components/Computer/TaskBarIcon.tsx","pages/Home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Flex","props","inline","flexDirection","flexWrap","justifyContent","alignItems","alignContent","style","newStyles","display","children","FlexItem","order","flexGrow","flexShrink","flexBasis","alignSelf","Screen","backgroundColor","width","height","position","Icon","margin","outlineStyle","outlineColor","outlineWidth","InnerScreen","TaskBar","TaskBarIcon","icons","ReactDOM","render","exact","path","component","map","icon","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCNOC,EAA2C,SAACC,GAAW,IACzDC,EAAoFD,EAApFC,OAAQC,EAA4EF,EAA5EE,cAAeC,EAA6DH,EAA7DG,SAAUC,EAAmDJ,EAAnDI,eAAgBC,EAAmCL,EAAnCK,WAAYC,EAAuBN,EAAvBM,aAAcC,EAASP,EAATO,MAC5EC,EAA8B,aAChCC,QAASR,EAAS,cAAgB,OAClCC,cAAeA,GAAgC,MAC/CC,SAAUA,GAAsB,SAChCC,eAAgBA,GAAkC,aAClDC,WAAYA,GAA0B,UACtCC,aAAcA,GAA8B,UACzCC,GAGP,OAAO,uBAAKA,MAAOC,GAAYR,EAAMU,WCb5BC,EAAmD,SAACX,GAAW,IAChEY,EAA6DZ,EAA7DY,MAAOC,EAAsDb,EAAtDa,SAAUC,EAA4Cd,EAA5Cc,WAAYC,EAAgCf,EAAhCe,UAAWC,EAAqBhB,EAArBgB,UAAWT,EAAUP,EAAVO,MACrDC,EAA8B,aAChCI,MAAOA,GAAgB,EACvBC,SAAUA,GAAsB,EAChCC,WAAYA,GAA0B,EACtCC,UAAWA,GAAwB,OACnCC,UAAWA,GAAwB,QAChCT,GAGP,OACI,uBAAKA,MAAOC,GAAYR,EAAMU,WCpBzBO,EAAsC,SAACjB,GAOhD,OACI,gBAAC,EAAD,CAAMO,MAP0B,CAChCW,gBAAiB,YACjBC,MAAO,OACPC,OAAQ,OACRC,SAAU,aAILrB,EAAMU,WCTNY,EAAgC,SAACtB,GAW1C,OACI,gBAAC,EAAD,CAAUO,MAXC,CACXW,gBAAiB,UACjBC,MAAO,OACPC,OAAQ,OACRG,OAAQ,OACRC,aAAa,SACbC,aAAc,OACdC,aAAc,IAKT1B,EAAMU,WCbNiB,EAAuC,SAAC3B,GAOjD,OACI,gBAAC,EAAD,CAAUc,WAAY,GAClB,gBAAC,EAAD,CAAMP,MAR0B,CACpCY,MAAO,OACPC,OAAQ,OACRC,SAAU,YAKmBlB,SAAS,OAAOD,cAAc,UAClDF,EAAMU,YCVVkB,EAAmC,SAAC5B,GAC7C,OACI,kBAAC,EAAD,CAAUO,MAAO,CAACW,gBAAiB,MAAOC,MAAO,QAASH,UAAU,YAChE,kBAAC,EAAD,KAAOhB,EAAMU,YCHZmB,EAAuC,SAAC7B,GACjD,OAAO,gBAAC,EAAD,KAAWA,EAAMU,WCYtBoB,EAAQ,CAAC,WAAW,SAAS,oBAAoB,kBAAmB,UCT1EC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UDPK,WAC7C,OACI,gBAAC,EAAD,KACI,gBAAC,EAAD,KACKL,EAAMM,KAAI,SAAAC,GAAI,OAAI,gBAAC,EAAD,KAAOA,OAE9B,gBAAC,EAAD,KACKP,EAAMM,KAAI,SAAAC,GAAI,OAAI,gBAAC,EAAD,KAAcA,aCG7CC,SAASC,eAAe,ST8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a1f6e200.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\n\r\nexport interface FlexProps {\r\n    inline?: boolean; // Default is flex(block) inline is inline-flex\r\n    flexDirection?: 'row-reverse' | 'column' | 'column-reverse'; // Default: row\r\n    flexWrap?: 'wrap' | 'wrap-reverse'; // Default: nowrap\r\n    justifyContent?: 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'; // Default: flex-start\r\n    alignItems?: 'flex-start' | 'flex-end' | 'center' | 'baseline'; // Default: stretch\r\n    alignContent?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'space-between' | 'space-around'; // Default: normal\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport const Flex: React.FunctionComponent<FlexProps> = (props) => {\r\n    const {inline, flexDirection, flexWrap, justifyContent, alignItems, alignContent, style} = props;\r\n    const newStyles: React.CSSProperties = {\r\n        display: inline ? 'inline-flex' : 'flex',\r\n        flexDirection: flexDirection ? flexDirection : 'row',\r\n        flexWrap: flexWrap ? flexWrap : 'nowrap',\r\n        justifyContent: justifyContent ? justifyContent : 'flex-start',\r\n        alignItems: alignItems ? alignItems : 'stretch',\r\n        alignContent: alignContent ? alignContent : 'normal',\r\n        ...style\r\n    };\r\n\r\n    return <div style={newStyles}>{props.children}</div>\r\n}","import * as React from 'react';\r\n\r\nexport interface FlexItemProps {\r\n    order?: number; // Default: 0\r\n    flexGrow?: number; // Default: 0\r\n    flexShrink?: number; // Default: 1\r\n    flexBasis?: string; // Default: auto; can be percentage or em\r\n    alignSelf?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch'; // Default: auto\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport const FlexItem: React.FunctionComponent<FlexItemProps> = (props) => {\r\n    const { order, flexGrow, flexShrink, flexBasis, alignSelf, style } = props;\r\n    const newStyles: React.CSSProperties = {\r\n        order: order ? order : 0,\r\n        flexGrow: flexGrow ? flexGrow : 0,\r\n        flexShrink: flexShrink ? flexShrink : 1,\r\n        flexBasis: flexBasis ? flexBasis : 'auto',\r\n        alignSelf: alignSelf ? alignSelf : 'auto',\r\n        ...style\r\n    }\r\n\r\n    return (\r\n        <div style={newStyles}>{props.children}</div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Flex } from '../Flex';\r\n\r\nexport const Screen: React.FunctionComponent<{}> = (props) => {\r\n    const styles: React.CSSProperties = {\r\n        backgroundColor: 'lightblue',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute'\r\n    }\r\n    return (\r\n        <Flex style={styles}>\r\n            {props.children}\r\n        </Flex>\r\n    );\r\n}","import * as React from 'react';\r\nimport { FlexItem } from '../Flex';\r\n\r\nexport const Icon: React.FunctionComponent = (props) => {\r\n    const styles = {\r\n        backgroundColor: '#efb0ff',\r\n        width: '80px',\r\n        height: '80px',\r\n        margin: '20px',\r\n        outlineStyle:'dashed',\r\n        outlineColor: 'gray',\r\n        outlineWidth: 1\r\n    }\r\n\r\n    return (\r\n        <FlexItem style={styles}>\r\n            {props.children}\r\n        </FlexItem>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Flex, FlexItem } from '../Flex';\r\n\r\nexport const InnerScreen: React.FunctionComponent = (props) => {\r\n    const flexStyles: React.CSSProperties = {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute'\r\n    }\r\n\r\n    return (\r\n        <FlexItem flexShrink={0}>\r\n            <Flex style={flexStyles} flexWrap=\"wrap\" flexDirection=\"column\">\r\n                {props.children}\r\n            </Flex>\r\n        </FlexItem>\r\n    )\r\n}","import React from \"react\"\r\nimport { FlexItem, Flex } from \"../Flex\"\r\n\r\nexport const TaskBar: React.FunctionComponent = (props) => {\r\n    return(\r\n        <FlexItem style={{backgroundColor: 'red', width: '100%'}} alignSelf=\"flex-end\">\r\n            <Flex>{props.children}</Flex>\r\n        </FlexItem>\r\n    )\r\n}","import * as React from 'react';\r\nimport { FlexItem } from '../Flex';\r\n\r\nexport const TaskBarIcon: React.FunctionComponent = (props) => {\r\n    return <FlexItem>{props.children}</FlexItem>;\r\n}","import * as React from 'react';\r\nimport { Icon, Screen, InnerScreen, TaskBar, TaskBarIcon } from '../components';\r\n\r\nexport const Home: React.FunctionComponent<{}> = () => {\r\n    return (\r\n        <Screen>\r\n            <InnerScreen>\r\n                {icons.map(icon => <Icon>{icon}</Icon>)}\r\n            </InnerScreen>\r\n            <TaskBar>\r\n                {icons.map(icon => <TaskBarIcon>{icon}</TaskBarIcon>)}\r\n            </TaskBar>\r\n        </Screen>\r\n    );\r\n};\r\n\r\nconst icons = ['about me','school','personal projects','school projects', 'resume'];","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Home } from './pages';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path=\"/portfolio/\" component={Home} />\r\n        </Switch>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}