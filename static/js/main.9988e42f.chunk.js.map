{"version":3,"sources":["serviceWorker.ts","components/Nav/NavItem.tsx","components/Pixel/Pixel.tsx","components/Nav/Nav.tsx","components/Button/Button.tsx","components/Display/Display.tsx","index.tsx","pages/Home.tsx"],"names":["Boolean","window","location","hostname","match","NavItem","style","this","props","children","React","Pixel","color","size","x","y","className","backgroundColor","width","height","left","top","position","Display","updateDimensions","innerWidth","Math","floor","innerHeight","pixels","getPixelInfo","setState","w","h","push","random","toString","state","addEventListener","bind","removeEventListener","map","pixelInfo","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CCfOC,EAAb,uKAEQ,OAAO,uBAAKC,MAAOC,KAAKC,MAAMF,OAAQC,KAAKC,MAAMC,cAFzD,GAA6BC,aCAhBC,GCKYD,YCLGA,YFAe,SAACF,GAAuB,IACvDI,EAAsBJ,EAAtBI,MAAOC,EAAeL,EAAfK,KAAMC,EAASN,EAATM,EAAGC,EAAMP,EAANO,EACxB,OAAO,uBAAKC,UAAU,QAAQV,MAAO,CACjCW,gBAAiBL,EACjBM,MAAOL,EACPM,OAAQN,EACRO,KAAMN,EACNO,IAAKN,EACLO,SAAU,gBGULC,EAAb,kDACI,WAAYf,GAAsB,IAAD,8BAC7B,cAAMA,IAUVgB,iBAAmB,WACf,IAAMX,EAAOZ,OAAOwB,YAAcxB,OAAOwB,WAAa,IAAM,GAAKxB,OAAOwB,WAAa,IAAO,GAAK,IAC3FP,EAAQQ,KAAKC,MAAM1B,OAAOwB,WAAaZ,GACvCM,EAASO,KAAKC,MAAM1B,OAAO2B,YAAcf,GACzCgB,EAAS,EAAKC,aAAaZ,EAAOC,EAAQN,GAEhD,EAAKkB,SAAS,CACVF,OAAQA,EACRX,MAAOA,EACPC,OAAQA,EACRN,KAAMA,KArBmB,EAkCjCiB,aAAe,SAACZ,EAAeC,EAAgBN,GAG3C,IAFA,IAAMgB,EAAS,GAEPG,EAAI,EAAGA,EAAId,EAAOc,IACtB,IAAI,IAAIC,EAAI,EAAGA,EAAId,EAAQc,IACvBJ,EAAOK,KAAK,CACRtB,MAAO,IAAIc,KAAKC,MAAoB,SAAdD,KAAKS,UAAmBC,SAAS,IACvDtB,EAAGkB,EAAInB,EACPE,EAAGkB,EAAIpB,EACPA,KAAMA,IAIlB,OAAOgB,GA7CP,EAAKQ,MAAQ,CACTR,OAAQ,GACRX,MAAO,EACPC,OAAQ,EACRN,KAAM,GAEV,EAAKW,mBARwB,EADrC,gEA2BQjB,KAAKiB,mBACLvB,OAAOqC,iBAAiB,SAAU/B,KAAKiB,iBAAiBe,KAAKhC,SA5BrE,6CAgCQN,OAAOuC,oBAAoB,SAAUjC,KAAKiB,iBAAiBe,KAAKhC,SAhCxE,+BAwDQ,OACI,uBAAKD,MAL0B,CAC/BgB,SAAU,aAKLf,KAAK8B,MAAMR,OAAStB,KAAK8B,MAAMR,OAAOY,KAAI,SAAAC,GAAS,OAAI,gBAAC,EAAUA,MAAgB,gDA1DnG,GAA6BhC,aCb7BiC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UCRxB,WAChB,OAUI,gBAAC,EAAD,WDAJC,SAASC,eAAe,SN6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9988e42f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\nimport { NavItemProps } from './NavItem.types';\r\n\r\nexport class NavItem extends React.Component<NavItemProps, {}> {\r\n    public render(): JSX.Element {\r\n        return <div style={this.props.style}>{this.props.children}</div>\r\n    }\r\n}","import * as React from 'react';\r\nimport { PixelProps } from './Pixel.types';\r\n\r\nexport const Pixel: React.FC<PixelProps> = (props: PixelProps) => {\r\n    const { color, size, x, y } = props;\r\n    return <div className=\"pixel\" style={{\r\n        backgroundColor: color,\r\n        width: size,\r\n        height: size,\r\n        left: x,\r\n        top: y,\r\n        position: 'absolute'\r\n    }}/>;\r\n}","import * as React from 'react';\r\nimport { NavProps } from './Nav.types';\r\nimport { NavItem } from './NavItem';\r\n\r\nconst isNavItem = (item: React.ReactNode): item is NavItem => {\r\n    return ((item as React.ReactElement)?.type as React.ComponentType)?.name === NavItem.name;\r\n}\r\n\r\nexport class Nav extends React.Component<NavProps, {}> {\r\n    render() {\r\n        return (\r\n            <div style={this.props.style}>\r\n                {this.props.children &&\r\n                    React.Children.map(React.Children.toArray(this.props.children),\r\n                    (child)=>{\r\n                        if (isNavItem(child)) {\r\n                            return child;\r\n                        }else {\r\n                            console.warn(\"Child needs to be NavItem\");\r\n                            return undefined;\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { ButtonProps } from './Button.types';\r\n\r\nexport class Button extends React.Component<ButtonProps, {}> {\r\n    render() {\r\n        return <div>a</div>;\r\n    }\r\n}","import * as React from 'react';\r\nimport { Pixel } from '../Pixel/Pixel';\r\n\r\ninterface pixelInfo {\r\n    color: string;\r\n    x: number;\r\n    y: number;\r\n    size: number;\r\n}\r\n\r\nexport interface DisplayProps {\r\n\r\n}\r\n\r\nexport interface DisplayState {\r\n    pixels: pixelInfo[];\r\n    width: number;\r\n    height: number;\r\n    size: number;\r\n}\r\n\r\nexport class Display extends React.Component<DisplayProps, DisplayState> {\r\n    constructor(props: DisplayProps) {\r\n        super(props);\r\n        this.state = {\r\n            pixels: [],\r\n            width: 0,\r\n            height: 0,\r\n            size: 0\r\n        };\r\n        this.updateDimensions();\r\n    }\r\n\r\n    updateDimensions = () => {\r\n        const size = window.innerWidth / (window.innerWidth < 600 ? 25 : window.innerWidth < 1000 ? 50 : 75);\r\n        const width = Math.floor(window.innerWidth / size);\r\n        const height = Math.floor(window.innerHeight / size);\r\n        const pixels = this.getPixelInfo(width, height, size);\r\n\r\n        this.setState({\r\n            pixels: pixels,\r\n            width: width,\r\n            height: height,\r\n            size: size\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateDimensions();\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    getPixelInfo = (width: number, height: number, size: number) => {\r\n        const pixels = [];\r\n\r\n        for(let w = 0; w < width; w++){\r\n            for(let h = 0; h < height; h++) {\r\n                pixels.push({\r\n                    color: \"#\"+Math.floor(Math.random()*16777215).toString(16),\r\n                    x: w * size,\r\n                    y: h * size,\r\n                    size: size\r\n                });\r\n            }\r\n        }\r\n        return pixels;\r\n    }\r\n\r\n    render() {\r\n        const style: React.CSSProperties = {\r\n            position: 'absolute',\r\n        }\r\n\r\n        return (\r\n            <div style={style}>\r\n                {this.state.pixels ? this.state.pixels.map(pixelInfo => <Pixel {...pixelInfo}/>) : <h1>Display error</h1>}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport { Home } from './pages';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path=\"/portfolio/\" component={Home} />\r\n        </Switch>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport { Display } from '../components';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        // <div>\r\n        //     <Nav style={{backgroundColor: 'darkgreen', width: '80%', display:'flex', justifyContent:'space-around', marginLeft:'10%', marginTop:'20px'}}>\r\n        //         <NavItem style={{padding:'20px'}}>Home</NavItem>\r\n        //         <NavItem>About me</NavItem>\r\n        //         <NavItem>School projects</NavItem>\r\n        //         <NavItem>Personal projects</NavItem>\r\n        //         <NavItem>Contact</NavItem>\r\n        //     </Nav>\r\n        // </div>\r\n        <Display/>\r\n    )\r\n};"],"sourceRoot":""}