{"version":3,"sources":["serviceWorker.ts","components/Flex/Flex.tsx","components/Flex/FlexItem.tsx","components/Computer/Screen.tsx","components/Computer/Icon.tsx","components/Computer/InnerScreen.tsx","components/Computer/TaskBar.tsx","components/Computer/Window.tsx","pages/Home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Flex","props","inline","flexDirection","flexWrap","justifyContent","alignItems","alignContent","style","ref","newStyles","display","children","FlexItem","order","flexGrow","flexShrink","flexBasis","alignSelf","Screen","styles","width","height","position","Icon","onClick","toggle","text","className","backgroundColor","InnerScreen","TaskBar","Window","topPadding","restPadding","React","pressed","setPressed","resizePressed","setResizePressed","x","y","setPosition","windowSize","setWindowSize","current","transform","outerStyles","zIndex","innerStyles","margin","titleStyles","exitButtonStyles","onMouseDown","event","clientX","clientY","onMouseMove","movementX","movementY","onMouseUp","title","pages","Home","pageWindow","forEach","page","state","canvas","document","getElementById","gl","getContext","clearColor","clear","COLOR_BUFFER_BIT","handleWindow","val","setState","fontFamily","id","map","ReactDOM","render","exact","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16f85b05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\r\n\r\ntype MergeElementProps<\r\n    T extends React.ElementType,\r\n    P extends object = {}\r\n> = Omit<React.ComponentPropsWithRef<T>, keyof P> & P;\r\n\r\nexport type FlexProps = MergeElementProps<\r\n    \"div\",\r\n    {\r\n        inline?: boolean; // Default is flex(block) inline is inline-flex\r\n        flexDirection?: 'row-reverse' | 'column' | 'column-reverse'; // Default: row\r\n        flexWrap?: 'wrap' | 'wrap-reverse'; // Default: nowrap\r\n        justifyContent?: 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'; // Default: flex-start\r\n        alignItems?: 'flex-start' | 'flex-end' | 'center' | 'baseline'; // Default: stretch\r\n        alignContent?: 'flex-start' | 'flex-end' | 'center' | 'stretch' | 'space-between' | 'space-around'; // Default: normal\r\n    }\r\n>;\r\n\r\nexport const Flex: React.FunctionComponent<FlexProps> = (props) => {\r\n    const {\r\n        inline,\r\n        flexDirection,\r\n        flexWrap,\r\n        justifyContent,\r\n        alignItems,\r\n        alignContent,\r\n        style,\r\n        ref\r\n    } = props;\r\n\r\n    const newStyles: React.CSSProperties = {\r\n        display: inline ? 'inline-flex' : 'flex',\r\n        flexDirection: flexDirection ? flexDirection : 'row',\r\n        flexWrap: flexWrap ? flexWrap : 'nowrap',\r\n        justifyContent: justifyContent ? justifyContent : 'flex-start',\r\n        alignItems: alignItems ? alignItems : 'stretch',\r\n        alignContent: alignContent ? alignContent : 'normal',\r\n        ...style\r\n    };\r\n\r\n    return <div ref={ref} style={newStyles}>{props.children}</div>\r\n}","import * as React from 'react';\r\n\r\nexport interface FlexItemProps {\r\n    order?: number; // Default: 0\r\n    flexGrow?: number; // Default: 0\r\n    flexShrink?: number; // Default: 1\r\n    flexBasis?: string; // Default: auto; can be percentage or em\r\n    alignSelf?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch'; // Default: auto\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport const FlexItem: React.FunctionComponent<FlexItemProps> = (props) => {\r\n    const { order, flexGrow, flexShrink, flexBasis, alignSelf, style } = props;\r\n    const newStyles: React.CSSProperties = {\r\n        order: order ? order : 0,\r\n        flexGrow: flexGrow ? flexGrow : 0,\r\n        flexShrink: flexShrink ? flexShrink : 1,\r\n        flexBasis: flexBasis ? flexBasis : 'auto',\r\n        alignSelf: alignSelf ? alignSelf : 'auto',\r\n        ...style\r\n    }\r\n\r\n    return (\r\n        <div style={newStyles}>{props.children}</div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Flex } from '../Flex';\r\n\r\nexport interface ScreenProps {\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport const Screen: React.FunctionComponent<ScreenProps> = (props) => {\r\n    const styles: React.CSSProperties = {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        ...props.style\r\n    }\r\n    return (\r\n        <Flex style={styles}>\r\n            {props.children}\r\n        </Flex>\r\n    );\r\n}","import * as React from 'react';\r\nimport { Flex, FlexItem } from '../Flex';\r\nimport './Icon.css';\r\n\r\nexport interface IconProps{\r\n    text: string;\r\n    toggle: (window: string, val: boolean) => void;\r\n}\r\n\r\nexport const Icon: React.FunctionComponent<IconProps> = props => {\r\n    return (\r\n        <button onClick={() => props.toggle(props.text, true)} className=\"icon\">\r\n            <Flex flexDirection=\"column\" justifyContent=\"center\">\r\n                <FlexItem alignSelf=\"center\"><div style={{width: '30px', height: '30px', backgroundColor:'red'}}></div></FlexItem>\r\n                <FlexItem alignSelf=\"center\">{props.text}</FlexItem>\r\n            </Flex>\r\n        </button>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Flex, FlexItem } from '../Flex';\r\n\r\nexport const InnerScreen: React.FunctionComponent = (props) => {\r\n    const flexStyles: React.CSSProperties = {\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute'\r\n    }\r\n\r\n    return (\r\n        <FlexItem flexShrink={0}>\r\n            <Flex style={flexStyles} flexWrap=\"wrap\" flexDirection=\"column\">\r\n                {props.children}\r\n            </Flex>\r\n        </FlexItem>\r\n    )\r\n}","import React from \"react\"\r\nimport { FlexItem, Flex } from \"../Flex\"\r\n\r\nexport const TaskBar: React.FunctionComponent = (props) => {\r\n    return(\r\n        <FlexItem style={{backgroundColor: 'red', width: '100%'}} alignSelf=\"flex-end\">\r\n            <Flex>{props.children}</Flex>\r\n        </FlexItem>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Flex, FlexItem } from '../Flex';\r\n\r\ninterface WindowProps extends React.PropsWithChildren<any> {\r\n    title: string;\r\n    topPadding?: number;\r\n    restPadding?: number;\r\n    toggle: (window: string, val: boolean) => void;\r\n}\r\n\r\nexport const Window: React.FC<WindowProps> = ({topPadding = 32, restPadding = 8, children, ...props}: WindowProps) => {\r\n    const [pressed, setPressed] = React.useState(false);\r\n    const [resizePressed, setResizePressed] = React.useState(false);\r\n    const [position, setPosition] = React.useState({x:100, y:100});\r\n    const [windowSize, setWindowSize] = React.useState({width: 800, height: 800});\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n\r\n    React.useEffect(() => {\r\n        if (ref.current) {\r\n            ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`\r\n        }\r\n    }, [position]);\r\n\r\n    React.useEffect(() => {\r\n        if (ref.current) {\r\n            ref.current.style.transform = `scale(${windowSize.width}px, ${windowSize.width}px)`\r\n        }\r\n    }, [windowSize]);\r\n\r\n    const outerStyles: React.CSSProperties = {\r\n        position:'fixed',\r\n        display: 'block',\r\n        width: windowSize.width + 'px',\r\n        height: windowSize.height + 'px',\r\n        zIndex: 2,\r\n        backgroundColor: 'whitesmoke',\r\n    }\r\n\r\n    const innerStyles: React.CSSProperties = {\r\n        backgroundColor:'gray',\r\n        margin: `${topPadding}px ${restPadding}px ${restPadding}px ${restPadding}px`,\r\n        width: (windowSize.width - (restPadding * 2)) + 'px',\r\n        height: (windowSize.height - (topPadding + restPadding)) + 'px'\r\n    }\r\n\r\n    const titleStyles: React.CSSProperties = {\r\n        margin: `${restPadding}px 0 0 0`,\r\n    }\r\n\r\n    const exitButtonStyles: React.CSSProperties = {\r\n        margin: `${restPadding}px`,\r\n        position: 'fixed',\r\n        alignSelf: 'flex-end'\r\n    }\r\n\r\n    const onMouseMove = (event: React.MouseEvent) => {\r\n        if (pressed) {\r\n            setPosition({\r\n                x: position.x + event.movementX,\r\n                y: position.y + event.movementY\r\n            })\r\n        }\r\n\r\n        if (resizePressed) {\r\n            setWindowSize({\r\n                width: windowSize.width + event.movementX,\r\n                height: windowSize.height + event.movementY\r\n            })\r\n        }\r\n    }\r\n\r\n    const onMouseDown = (event: React.MouseEvent) => {\r\n        const [x, y] = [event.clientX, event.clientY];\r\n\r\n        if (x >= position.x && x <= position.x + windowSize.width &&\r\n            y >= position.y && y <= position.y + (restPadding + topPadding)){\r\n                setPressed(true);\r\n        }\r\n\r\n        // TODO: This one is janky, needs some tuning maybe even remove and have a maximize button?\r\n        if (x >= (position.x + windowSize.width - restPadding) && x <= (position.x + windowSize.width) &&\r\n            y >= (position.y + windowSize.height - restPadding) && y <= (position.y + windowSize.height)){\r\n                setResizePressed(true);\r\n        }\r\n    }\r\n\r\n    const onMouseUp = (event: React.MouseEvent) => {\r\n        setPressed(false);\r\n        setResizePressed(false);\r\n    }\r\n\r\n    return (\r\n        <div ref={ ref }\r\n            style={ outerStyles }\r\n            onMouseDown={ onMouseDown }\r\n            onMouseMove={ onMouseMove }\r\n            onMouseUp={ onMouseUp }\r\n        >\r\n            <Flex justifyContent=\"center\" style={{position: 'fixed', width: '100%'}}>\r\n                <FlexItem alignSelf=\"center\"><p style={titleStyles}>{props.title}</p></FlexItem>\r\n            </Flex>\r\n            <Flex justifyContent=\"flex-end\" style={{position: 'fixed', width: '100%'}}>\r\n                <FlexItem><button style={exitButtonStyles} onClick={() => props.toggle(props.title, false)}>X</button></FlexItem>\r\n            </Flex>\r\n            <div style={innerStyles}>{children}</div>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Icon, Screen, InnerScreen, TaskBar, TaskBarIcon, Window } from '../components';\r\n\r\nconst pages = ['About me','School','Personal projects','School projects', 'Resume'];\r\n\r\nexport interface HomeState {\r\n    pageWindow: {[page: string]: boolean};\r\n}\r\n\r\nexport class Home extends React.Component<{}, HomeState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        let pageWindow: {[page: string]: boolean} = {};\r\n\r\n        pages.forEach(page => {\r\n            pageWindow[page] = true;\r\n         });\r\n\r\n        this.state = {\r\n            pageWindow: pageWindow\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const canvas = document.getElementById('background') as HTMLCanvasElement;\r\n        const gl = canvas.getContext('webgl2');\r\n        if (canvas && gl) {\r\n            gl.clearColor(0, 0, 0, 0.9);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const handleWindow = (window: string, val: boolean) => {\r\n            let { pageWindow } = this.state;\r\n            pageWindow[window] = val;\r\n            this.setState({\r\n                pageWindow: pageWindow\r\n            })\r\n        };\r\n\r\n        return (\r\n            <div style={{ fontFamily: 'Consolas,monaco,monospace' }}>\r\n                <canvas id=\"background\" style={{position:'absolute', width: '100%', height: '100%'}}></canvas>\r\n                <Screen>\r\n                    {pages.map(page => this.state.pageWindow[page] && <Window title={page} toggle={handleWindow}><h1></h1></Window>)}\r\n                    <InnerScreen>\r\n                        {pages.map(page => <Icon text={page} toggle={handleWindow}>{page}</Icon>)}\r\n                    </InnerScreen>\r\n                    <TaskBar>\r\n                        <button>Start</button>\r\n                        {/* {pages.map(page => <TaskBarIcon>{page}</TaskBarIcon>)} */}\r\n                    </TaskBar>\r\n                </Screen>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Home } from './pages';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path=\"/portfolio/\" component={Home} />\r\n        </Switch>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}