{"version":3,"sources":["serviceWorker.ts","Forest/Campfire.tsx","Forest/Tree.tsx","Forest/Forest.tsx","pages/Home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Campfire","campfireSize","innerWidth","campfireLeft","campfireTop","innerHeight","style","width","height","left","top","className","position","boxShadow","borderRadius","opacity","Tree","props","Forest","leftForestPos","rightForestPos","leftForest","rightForest","randRange","r","Math","floor","treeNum","c","randY","random","x","y","push","Home","overflow","backgroundColor","React","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.850cfe75.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport \"./Campfire.css\";\n\nexport const Campfire: React.FC = () => {\n  const campfireSize = window.innerWidth / 4;\n  const campfireLeft = window.innerWidth / 2 - campfireSize / 2;\n  const campfireTop = window.innerHeight / 4;\n  const glowStyles: React.CSSProperties = {\n    position: \"absolute\",\n    boxShadow: `0 0 75px 75px #a3200f, 0 0 150px 150px #fdce66`,\n    top: `240px`,\n    left: `184px`,\n    width: `1px`,\n    height: `1px`,\n    borderRadius: `50%`,\n    opacity: 0.7,\n  };\n\n  return (\n    <div\n      style={{\n        width: `${campfireSize}px`,\n                    height: `${campfireSize}px`,\n        left: `${campfireLeft}px`,\n        top: `${campfireTop}px`,\n      }}\n      className=\"campfire\"\n    >\n      <div style={glowStyles}></div>\n      <div className=\"logs\">\n        <div className=\"log-4\">\n          <div className=\"log\">\n            <div className=\"end-1\">\n              <div className=\"inner-end\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"log-3\">\n          <div className=\"log\">\n            <div className=\"end-1\">\n              <div className=\"inner-end\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"log-2\">\n          <div className=\"log\">\n            <div className=\"end-1\">\n              <div className=\"inner-end\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"log-1\">\n          <div className=\"log\">\n            <div className=\"end-1\">\n              <div className=\"inner-end\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"fire\">\n        <div className=\"flame\">\n          <div className=\"outer-flame\">\n            <div className=\"medium-flame\">\n              <div className=\"inner-flame\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"spark-1\">\n          <div className=\"outer-flame\">\n            <div className=\"medium-flame\">\n              <div className=\"inner-flame\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"spark-2\">\n          <div className=\"outer-flame\">\n            <div className=\"medium-flame\">\n              <div className=\"inner-flame\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"spark-3\">\n          <div className=\"outer-flame\">\n            <div className=\"medium-flame\">\n              <div className=\"inner-flame\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport \"./Tree.css\";\n\nexport interface TreeProps extends Omit<Partial<HTMLDivElement>, \"style\"> {\n  style?: React.CSSProperties;\n}\n\nexport const Tree: React.FC<TreeProps> = (props) => {\n  return (\n    <div style={props.style} className=\"tree\">\n      <div className=\"trunk\">\n        <div className=\"wood\">\n          <div className=\"inner-wood\"></div>\n        </div>\n      </div>\n      <div className=\"leaves\">\n        <div className=\"low\">\n          <div className=\"medium\">\n            <div className=\"top\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Campfire } from \"./Campfire\";\nimport { Tree } from \"./Tree\";\n\nexport const Forest: React.FC = () => {\n  const treeNum = 8;\n  const leftForestPos = {\n    x: -150,\n    y: -200,\n    rangeX: window.innerWidth / 3,\n    rangeY: window.innerHeight - 200,\n  };\n  const rightForestPos = {\n    x: window.innerWidth - 150,\n    y: -200,\n    rangeX: window.innerWidth / 3,\n    rangeY: window.innerHeight - 200,\n  };\n  const leftForest = [];\n  const rightForest = [];\n  const randRange = { y: 50, x: 200 };\n\n  for (let r = 0; r < Math.floor(treeNum / 2); r++) {\n    for (let c = 0; c < r + 1; c++) {\n      const randY = Math.random() * randRange.y;\n      const randX = Math.random() * randRange.x;\n      const x =\n        leftForestPos.x +\n        randX +\n        c * (leftForestPos.rangeX / Math.floor(treeNum / 2));\n      const y =\n        leftForestPos.y +\n        randY +\n        r * (leftForestPos.rangeY / Math.floor(treeNum / 2));\n      leftForest.push(<Tree style={{ left: `${x}px`, top: `${y}px` }} />);\n    }\n  }\n\n  for (let r = 0; r < Math.floor(treeNum / 2); r++) {\n    for (let c = 0; c < r + 1; c++) {\n      const randY = Math.random() * randRange.y;\n      const randX = Math.random() * randRange.x;\n      const x =\n        rightForestPos.x -\n        randX -\n        c * (rightForestPos.rangeX / Math.floor(treeNum / 2));\n      const y =\n        rightForestPos.y +\n        randY +\n        r * (rightForestPos.rangeY / Math.floor(treeNum / 2));\n      rightForest.push(<Tree style={{ left: `${x}px`, top: `${y}px` }} />);\n    }\n  }\n\n  return (\n    <div className=\"background\">\n      {leftForest}\n      <Campfire />\n      {rightForest}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Forest } from \"../Forest\";\n\nexport class Home extends React.Component {\n  render() {\n    return (\n      <div style={{ overflow: \"hidden\", backgroundColor: '#06083' }}>\n        <Forest />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./index.css\";\nimport { Home } from \"./pages\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/portfolio/\" component={Home} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}