{"version":3,"sources":["Engine/actions/LoopActions/Types.ts","Engine/actions/LoopActions/LoopActions.tsx","Engine/actions/index.ts","Engine/reducers/loopReducers/LoopReducer.tsx","Engine/reducers/index.ts","Engine/Components/Functionality/Loop.tsx","Components/Square.tsx","Engine/Components/Map/Cell.tsx","Engine/Components/Map/Terrain.tsx","Components/App.tsx","serviceWorker.ts","Engine/store/store.tsx","index.tsx"],"names":["LoopActionTypes","subscribeToLoop","func","inputCheck","type","SUBSCRIBE","undefined","initialLoopState","subscriptions","loopReducer","state","action","Loop","requestID","fps","keys","timeMeasurements","keyChange","ev","setState","map","key","isPressed","loop","push","performance","now","msPassed","length","Math","round","props","forEach","window","requestAnimationFrame","this","document","onkeydown","onkeyup","cancelAnimationFrame","className","React","connect","store","loopState","Square","update","left","top","movingRight","styles","position","backgroundColor","width","height","style","Cell","size","isWall","Terrain","sizeOfCell","cells","i","j","cell","App","Component","Boolean","location","hostname","match","rootReducer","combineReducers","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e708f14f.chunk.js","sourcesContent":["export enum LoopActionTypes {\n    SUBSCRIBE = 'SUBSCRIBE',\n}\n\nexport interface ILoopSubscribe {\n    type: LoopActionTypes.SUBSCRIBE;\n    func: Function;\n    inputCheck: boolean;\n}\n\n// ILoopSubscribe | ILoopX\nexport type LoopActions = ILoopSubscribe;","import { LoopActions, LoopActionTypes } from './Types';\n\nexport const subscribeToLoop = (func: Function, inputCheck?: boolean): LoopActions => {\n    return {\n        type: LoopActionTypes.SUBSCRIBE,\n        func: func,\n        inputCheck: (inputCheck === undefined) ? false : inputCheck\n    };\n};","export * from './LoopActions/LoopActions';\nexport * from './LoopActions/Types';","import { LoopActionTypes, LoopActions } from '../../actions';\nimport { ILoopState } from './Types';\n\n\nconst initialLoopState: ILoopState = {\n    subscriptions: []\n}\n\nexport const loopReducer = (\n    state = initialLoopState,\n    action: LoopActions\n): ILoopState => {\n    switch(action.type) {\n        //case LoopActionTypes.subscribe: -- do somethin\n        case LoopActionTypes.SUBSCRIBE:\n            return {\n                subscriptions: [\n                    ...state.subscriptions,\n                    {\n                        inputCheck: action.inputCheck,\n                        func: action.func\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n}","export * from './loopReducers/LoopReducer';\nexport * from './loopReducers/Types';","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { IAppState } from '../../store/store';\nimport { ISubscription } from '../../reducers';\nimport './Loop.styles.css';\n\ninterface ILoopProps {\n    loop: ISubscription[];\n}\n\ninterface ILoopState {\n    requestID: number;\n    fps: number;\n    keys: IKey[];\n}\n\nexport interface IKey {\n    key: string;\n    isPressed: boolean;\n}\n\nclass Loop extends React.Component<ILoopProps, ILoopState> {\n    public readonly state: Readonly<ILoopState> = {\n        requestID: 0,\n        fps: 0,\n        keys: []\n    }\n\n    private timeMeasurements: number[] = [];\n\n    componentDidMount(){\n        this.setState({\n            requestID: window.requestAnimationFrame(this.loop),\n            keys: [\n                {key: 'w', isPressed: false},\n                {key: 'a', isPressed: false},\n                {key: 's', isPressed: false},\n                {key: 'd', isPressed: false}\n            ]\n        });\n        document.onkeydown = this.keyChange;\n        document.onkeyup = this.keyChange;\n    }\n\n    componentWillUnmount() {\n        const {requestID} = this.state;\n\n        if(requestID){\n            window.cancelAnimationFrame(requestID);\n        }\n    }\n\n    keyChange = (ev: KeyboardEvent) => {\n        const { keys } = this.state;\n\n        if(ev.type === 'keyup'){\n            this.setState({\n                keys: keys.map((key: IKey) => {\n                    if(ev.key === key.key){\n                        return {key: key.key, isPressed: false};\n                    }else{\n                        return key;\n                    }\n                })\n            })\n        }else if(ev.type === 'keydown'){\n            this.setState({\n                keys: keys.map((key: IKey) => {\n                    if(ev.key === key.key){\n                        return {key: key.key, isPressed: true};\n                    }else{\n                        return key;\n                    }\n                })\n            })\n        }\n    }\n\n    loop = () => {\n        this.timeMeasurements.push(performance.now());\n\n        const msPassed = this.timeMeasurements[this.timeMeasurements.length-1] - this.timeMeasurements[0];\n\n        if (msPassed >= 0.5 * 1000) {\n            this.setState({\n                fps: Math.round(this.timeMeasurements.length / msPassed * 1000 * 2) / 2\n            });\n            this.timeMeasurements = [];\n        }\n\n        this.props.loop.forEach(func => {\n            if(func.inputCheck){\n                func.func(this.state.keys);\n            }else{\n                func.func();\n            }\n        });\n        this.setState({\n            requestID: window.requestAnimationFrame(this.loop)\n        })\n    }\n\n    public render() {\n        const { fps } = this.state;\n        return (\n            <div className=\"loopStats\">\n                <div>{`fps: ${fps}`}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IAppState) => {\n    return {\n        loop: store.loopState.subscriptions\n    };\n};\n\nexport default connect(mapStateToProps)(Loop);","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { subscribeToLoop } from '../Engine/actions';\nimport { IAppState } from '../Engine/store/store';\nimport { IKey } from '../Engine/Components/Functionality/Loop';\n\nexport interface ISquareState {\n    left: number;\n    top: number;\n    movingRight: boolean;\n}\n\ninterface ISquareProps {\n    subscribeToLoop: typeof subscribeToLoop;\n}\n\nclass Square extends React.Component<ISquareProps, ISquareState>{\n    constructor(props: ISquareProps){\n        super(props);\n        this.state = ({\n            left: 42,\n            top: 42,\n            movingRight: true\n        });\n    }\n\n    componentDidMount(){\n        this.props.subscribeToLoop(this.update, true);\n    }\n\n    update = (keys: IKey[]) => {\n        keys.forEach((key: IKey) =>{\n            if(key.isPressed){\n                switch(key.key){\n                    case 'a':\n                        if(key.isPressed){\n                            this.setState({\n                                left: this.state.left-1\n                            })\n                        }\n                        break;\n                    case 's':\n                        this.setState({\n                            top: this.state.top+1\n                        })\n                        break;\n                    case 'd':\n                        this.setState({\n                            left: this.state.left+1\n                        })\n                        break;\n                    case 'w':\n                        this.setState({\n                            top: this.state.top-1\n                        })\n                        break;\n                }\n            }\n        })\n    }\n\n    render(){\n        const styles: React.CSSProperties = {\n            position: 'relative',\n            backgroundColor:'lightblue',\n            width: '20px',\n            height: '20px',\n            left: this.state.left + 'px',\n            top: this.state.top + 'px'\n        }\n        return (\n            <div style={styles}/>\n        );\n    }\n}\n\nconst mapStateToProps = (store: IAppState) => {\n    return {\n        loop: store.loopState.subscriptions\n    };\n};\n\nexport default connect(mapStateToProps,{ subscribeToLoop })(Square);","import * as React from 'react';\nimport './Cell.styles.css';\n\nexport interface ICellProps{\n    left: number;\n    top: number;\n    isWall: boolean;\n    size: number;\n}\n\nexport class Cell extends React.Component<ICellProps>{\n    render(){\n        const styles = {\n            left: this.props.left+'px',\n            top: this.props.top+'px',\n            width: this.props.size+'px',\n            height: this.props.size+'px'\n        }\n        const key = `${this.props.left}x${this.props.top}`;\n        return(\n            this.props.isWall ? <div key={key} style={styles} className=\"wall\"/> : <div key={key} style={styles} className=\"open\"/>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Cell } from './Cell';\n\nexport interface ITerrainProps {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    cells: boolean[];\n    sizeOfCell: number;\n}\n\nexport class Terrain extends React.Component<ITerrainProps>{\n    private map: JSX.Element[] = [];\n\n    componentWillMount(){\n        const {width, height, sizeOfCell, cells, left, top} = this.props;\n        for(let i = 0; i < width; i++){\n            for(let j = 0; j < height; j++){\n                this.map.push(\n                    <Cell\n                        left={left+(i*sizeOfCell)}\n                        top={top+(j*sizeOfCell)}\n                        isWall={cells[j*width+i]}\n                        size={sizeOfCell}\n                    />\n                );\n            }\n        }\n    }\n\n    render(){\n        return(\n            <div style={{position: 'absolute', left: this.props.left+'px', top: this.props.top+'px'}} className=\"terrain\">\n                {this.map.map(cell => {\n                    return cell\n                })}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Loop from '../Engine/Components/Functionality/Loop';\nimport Square from '../Components/Square';\nimport { Terrain } from '../Engine/Components/Map/Terrain';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <>\n        <Terrain\n          left={0}\n          top={0}\n          width={10}\n          height={20}\n          sizeOfCell={40}\n          cells={[\n            true, true, true, true, true, true, true, true, true, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, false, true, false, false, true, false, true, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, true, false, false, false, false, true, true,\n            true, false, false, false, false, true, true, false, false, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, false, true, false, false, true, false, true, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, false, false, false, false, false, false, false, false, true,\n            true, false, true, false, false, true, false, true, false, true,\n            true, true, true, true, true, true, true, true, true, true,\n          ]}/>\n        <Square/>\n        <Loop/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { ILoopState, loopReducer } from '../reducers';\n\nexport interface IAppState {\n    loopState: ILoopState;\n}\n\nconst rootReducer = combineReducers<IAppState>({\n    loopState: loopReducer\n});\n\nconst configureStore = (): Store<IAppState, any> => {\n    const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\n    return store;\n}\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from 'redux';\nimport configureStore, { IAppState } from './Engine/store/store';\n\ninterface IProps {\n    store: Store<IAppState>;\n}\n\nconst Root: React.FC<IProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <App/>\n        </Provider>\n    );\n};\n\nconst store = configureStore();\n\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}