{"version":3,"sources":["fonts/PressStart2P-Regular.ttf","serviceWorker.ts","portfolio/pages/Page.tsx","portfolio/pages/Home.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","pageStyles","position","width","height","overflow","backgroundColor","Page","props","style","children","Taskbar","className","Clock","React","Date","date","setDate","refresh","timerId","setInterval","clearInterval","toLocaleDateString","toLocaleTimeString","Modal","show","onClick","onClose","IconButton","showPanel","useShowPanel","icon","ReactDOM","render","exact","path","component","map","page","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAAAA,EAAOC,QAAU,IAA0B,kD,4ECYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCfAC,G,YAAkC,CACtCC,SAAU,WACVC,MAAO,OACPC,OAAQ,OACRC,SAAU,SACVC,gBAAiB,YAONC,EAA4B,SAACC,GAAD,OAAsB,yBAAKC,MAAOR,GAAaO,EAAME,WCexFC,EAAoB,SAAAH,GACxB,OAAO,uBAAKI,UAAU,wBAAwBJ,EAAME,WAGhDG,EAAkB,SAAAL,GACtB,MAAwBM,WAAe,IAAIC,MAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAU,kBAAMD,EAAQ,IAAIF,OASlC,OAPAD,aAAgB,WACd,IAAMK,EAAUC,YAAYF,EAAS,KACrC,OAAO,WACLG,cAAcF,MAEf,IAGD,uBAAKP,UAAU,SACb,4BAAOI,EAAKM,sBACZ,4BAAON,EAAKO,wBAUZC,EAA8B,SAAAhB,GAClC,OAAOA,EAAMiB,KACX,uBAAKb,UAAU,SACb,uBAAKA,UAAU,gBACb,2BACE,0BAAQA,UAAU,cAAcc,QAASlB,EAAMmB,SAA/C,MAIF,2BAAMnB,EAAME,YAGd,MAOAkB,EAAwC,SAAApB,GAC5C,MAAkCM,YAAe,GAAjD,mBAAOe,EAAP,KAAkBC,EAAlB,KAEA,OACE,2BACE,0BAAQJ,QAAS,kBAAMI,GAAa,IAAOlB,UAAU,cAClDJ,EAAMuB,MAET,gBAAC,EAAD,CAAON,KAAMI,EAAWF,QAAS,kBAAMG,GAAa,KACjDtB,EAAME,Y,MC9EfsB,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UDLlB,WAClB,OACE,gBAAC,EAAD,KACE,uBAAKxB,UAAU,aACb,uBAAKA,UAAU,UACb,gBAAC,EAAD,KACE,uBAAKA,UAAU,SACf,gBAAC,EAAD,MACA,uBAAKA,UAAU,SAEf,uBAAKA,UAAU,SACf,uBAAKA,UAAU,WAGnB,uBAAKA,UAAU,WACZ,CAAC,WAAY,gBAAiB,WAAY,gBAAgByB,KAAI,SAAAC,GAAI,OACjE,gBAAC,EAAD,KAAaA,cCRvBC,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.135cbedd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PressStart2P-Regular.f98cd910.ttf\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Page.css';\r\n\r\nconst pageStyles: React.CSSProperties = {\r\n  position: 'absolute',\r\n  width: '100%',\r\n  height: '100%',\r\n  overflow: 'hidden',\r\n  backgroundColor: '#000000',\r\n};\r\n\r\nexport type PageProps = {\r\n  children: JSX.Element;\r\n};\r\n\r\nexport const Page: React.FC<PageProps> = (props: PageProps) => <div style={pageStyles}>{props.children}</div>;\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Home.css';\r\nimport { Page } from './Page';\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <Page>\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <Taskbar>\r\n            <div className=\"icon\" />\r\n            <Clock />\r\n            <div className=\"icon\" />\r\n            {/* This should be some tracker */}\r\n            <div className=\"icon\" />\r\n            <div className=\"icon\" />\r\n          </Taskbar>\r\n        </div>\r\n        <div className=\"content\">\r\n          {['About me', 'About my work', 'Projects', 'Current work'].map(page => (\r\n            <IconButton>{page}</IconButton>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst Taskbar: React.FC = props => {\r\n  return <div className=\"taskbar pixel-border\">{props.children}</div>;\r\n};\r\n\r\nconst Clock: React.FC = props => {\r\n  const [date, setDate] = React.useState(new Date());\r\n  const refresh = () => setDate(new Date());\r\n\r\n  React.useEffect(() => {\r\n    const timerId = setInterval(refresh, 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <span>{date.toLocaleDateString()}</span>\r\n      <span>{date.toLocaleTimeString()}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ModalProps = {\r\n  onClose: () => void;\r\n  show: boolean;\r\n};\r\n\r\nconst Modal: React.FC<ModalProps> = props => {\r\n  return props.show ? (\r\n    <div className=\"modal\">\r\n      <div className=\"modalContent\">\r\n        <div>\r\n          <button className=\"closeButton\" onClick={props.onClose}>\r\n            x\r\n          </button>\r\n        </div>\r\n        <div>{props.children}</div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\ntype IconButtonProps = {\r\n  icon?: string;\r\n};\r\n\r\nconst IconButton: React.FC<IconButtonProps> = props => {\r\n  const [showPanel, useShowPanel] = React.useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => useShowPanel(true)} className=\"iconButton\">\r\n        {props.icon}\r\n      </button>\r\n      <Modal show={showPanel} onClose={() => useShowPanel(false)}>\r\n        {props.children}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Home } from './portfolio';\r\nimport './fonts/PressStart2P-Regular.ttf';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/portfolio/\" component={Home} />\r\n    </Switch>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}